// Copyright 2023 311CA Dan-Dominic Staicu <dando.ds11@gmail.com>
Bonus homework given by Bitdefender

My_av

Task 1
	For this task, the program first reads the database and saves it inside
a matrix; if that was succesfull, the next step is opening the input and output
files, as we need to read and write simultaneously; it creates a char matrix
with known malicious extensions; 
	When it starts reading urls, it checks if the domain contains more than 10%
digits; these links clould be ips or just suspicious;
	If it passed the first test, we check if the domain is found in the db;
	If the second test is passed as well, we check if it contains an malicious
extension at the end;
	It writes the results in the output file after each URL_LEN
	In the end closes the files

Task 2:
	For this task, the program fisrlt opens the input and output files, as
it will need them simultaneously;
	After stepping over the header, it starts reading every line as a single
char string; it separates the char strings, using commas (,) as sepparators;
	If the 4th column doesn't include the "0 days 00:00:00" string, it means
it takes longer than 1 second;
	If the last column (flow_pkts_payload.avg) is different than 0, it checks
if fwd_pkts_payload.avg is equal to this column; if they are equal, it's a
cryptominer;


VERSION CONTROL: 

commit 1: Initial commit
	*added README and main

commit 2: Link detection
	*first implementation of Link detection
	*can detect links which have a domain from the database
	*can detect executable files

commit 3: Url detect minimal working
	*F1=0.675
	*if more than 10% of domain name is digits, than it's malware

commit 4: Memory alloc defensive
	*added defensive programming at FILE loading
	*created files for traffic detection

commit 5: flow_duration v1
	*added utils header for common funcs
	*v1 of traffic detection, only with flow_duration

commit 6: 100/100 in C
	*fwd_pkts compared to flow_pkts to detect cryptominer
	*added 
	
commit 7: README
	*written README
